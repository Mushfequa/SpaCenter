//	We want to use this to test the user service
//	TODO: Add ability to create/use a separate test DB
var assert = require("assert"),
	async = require('async'),
	_ = require('lodash'),
	Sequelize 	= require('sequelize'),
	//	Grab the models using our connection
	models = require('../models')(new Sequelize(
		'care', 
		'postgres',
		'postgres',
		{
			dialect: "postgres",	// 'mysql', 'sqlite', 'postgres', 'mariadb'
			port:    5432,			// 3306 = mysql, 5432 = postgres
			omitNull: true			// Needed to get sequelize to NOT insert nulls for postgres keys
		}
	)),
	user = require("../services/user.service")(models),
	userIDs = [];


//	User test
describe('User', function(){

	describe('#create()', function(){
		it('should create a user with no tasks', function(done){
			user.create({
					username: 'Barry Test',
					userpassword: 'password',
					email: 'barry' + (new Date()).getTime() + '@example.com'
				}, 
				null, 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(user.username, 'Barry Test');
					userIDs.push(user.id);
					done();
				});
		});
	});

	describe('#create()', function(){
		it('should throw an error when we try to create a user with an invalid email address', function(done){
			user.create({
					username: 'Barry Test',
					userpassword: 'password',
					email: '@'
				}, 
				null, 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(err.email[0], 'Email address must be between 7 and 128 characters in length');
					assert.equal(err.email[1], 'Email address must be valid');
					assert.equal(err.email.length, 2);
					done();
				});
		});
	});

	describe('#create()', function(){
		it('should create a user with a set of tasks', function(done){
			user.create({
					username: 'Barry Test',
					userpassword: 'password',
					email: 'barry' + (new Date()).getTime() + '@example.com'
				}, 
				[{ title: 'blah', complete: false }, { title: 'deblah', complete: true }], 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(user.username, 'Barry Test');
					userIDs.push(user.id);
					done();
				});
		});
	});

	describe('#get()', function(){
		it('should get a user by id', function(done){
			//	Grab the newly created user
			user.get(userIDs[1], function(err, user){
				assert.equal(user.username, 'Barry Test');
				assert.equal(user.tasks[1].title, 'deblah');
				assert.equal(user.tasks[1].complete, true);
				done();
			});
		});
	});

	describe('#update()', function(){
		it('should update a user\'s password', function(done){
			user.update({
					id: userIDs[0],
					userpassword: 'password2'
				},
				//	null won't change the tasks, [] will empty the tasks
				null, 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(user.userpassword, 'password2');
					done();
				});
		});
	});

	describe('#update()', function(){
		it('should throw an error when we try to set an invalid email', function(done){
			user.update({
					id: userIDs[0],
					email: 'notanemailaddress'
				},
				//	null won't change the tasks, [] will empty the tasks
				null, 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(err.email[0], 'Email address must be valid');
					assert.equal(err.email.length, 1);
					done();
				});
		});
	});

	describe('#update()', function(){
		it('should update a user\'s tasks', function(done){
			user.update({
					id: userIDs[0]
				},
				//	null won't change the tasks, [] will empty the tasks
				[{ title: 'Get milk', complete: false }], 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(user.userpassword, 'password2');
					done();
				});
		});
	});

	describe('#create()', function(){
		it('should throw error when trying to create a user with a password length less than 6', function(done){
			user.create({
					username: 'Barry Test',
					userpassword: '123',
					email: 'barry' + (new Date()).getTime() + '@example.com'
				}, 
				[{ title: 'blah', complete: false }, { title: 'deblah', complete: true }], 
				//	The callback returns error or null, user or null
				function(err, user){
					assert.equal(typeof user, 'undefined');
					assert.equal(err.userpassword, 'Password must be at least 6 characters');
					done();
				});
		});
	});

	describe('#delete()', function(){
		it('should delete all test users and associated tasks', function(done){
			var endAt = userIDs.length - 1;
			_.forOwn(userIDs, function(id, k){
				user.delete(id, function(err){
					assert.equal(typeof err, 'undefined');

					//	Try to get the user - we expect use to be null
					user.get(userIDs[1], function(err, user){
						assert.equal(user, null);
						if(endAt == k) {
							done();
						}
					});

				});
			});
		});
	});

});