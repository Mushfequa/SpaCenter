extends layout
include ../node_modules/jade-helpers/mixins/form-mixins
block content

	h2= t('welcomeHeading')

	form(role="form").form-horizontal
		fieldset
			h2= t('signupHeading')

			+formRow(form.fullName)
				+textBox(form.fullName)("data-bind" = "valueInit: fullName")

			+formRow(form.spam[0])
				each spam in form.spam
					- spam["data-bind"] = "valueInit: spam"
					+radioBoxLine(spam)

			+formRow(form.extra)
				+checkBoxLine(form.extra)("data-bind" = "valueInit: extra")

			+formRow(form.typeSelect)
				+selectBox(form.typeSelect)("data-bind" = "valueInit: type")

			//- Using KO to hide a money box until a type is selected.
			div("data-bind" = "visible: type() !== ''")
				+formRow(form.money)
					+textBox(form.money)("data-bind" = "valueInit: moneyBox")

			+row()("data-bind" = "visible: type() !== ''")
				p Shown only when selected type

			h2 Custom Enumeration

			//- Custom control with input and list of radios
			+formRow(form.customValue)
				div.valueBox
					+textBox(form.customValue)
				div.valueBoxList
					//- Loop on the enum options
					each cust in form.customEnum.options
						- cust.name = form.customEnum.name
						+checkBoxLine(cust)("data-bind" = "checkedInit: " + cust.id)

			h2 View model

			pre("data-bind"="text: ko.toJSON($data, null, 2)")


	script.
		var VM = function(){
			var self = this;
			self.fullName = ko.observable();
			self.extra = ko.observable();
			self.type = ko.observable();
			//	Map over the custom enums and create observables
			#{form.customEnum.options.map(function(o){return "self." + o.id + " = ko.observable();"}).join(";\n			")}

			self.spam = ko.observable();
			self.moneyBox = ko.observable();
			self.moneyDivObj = ko.observable();
			self.moneyDiv = ko.computed({
				read: function(){
					//	TODO: Could format stuff here...
					return self.moneyDivObj();
				},
				write: function(value) {
					self.moneyDivObj(value);
				}
			});
		}, vm = new VM();
		ko.applyBindings(vm);