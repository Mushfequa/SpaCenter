extends layout
block content

	if(error)
		h1 Error
		div.error= JSON.stringify(error)
	else

		form(role="form", action=form.action, method="post").form-horizontal

			if(form.user.id && form.user.id.value !== undefined)
				input(type="hidden", name="id", value=form.user.id.value)

			fieldset
				h2= t('userHeading')

				+formRow(form.user.username)
					+textBox(form.user.username)("data-bind" = "valueInit: username")

				+formRow(form.user.userpassword)
					+textBox(form.user.userpassword)(type = "password", autocomplete = "off", data-validator-aggressive = "true")

				+formRow(form.user.email)
					+textBox(form.user.email)("data-bind" = "valueInit: email")

				hr

				fieldset
					h2= t('userTasksHeading')

					+row()
						+label(for="addTaskBox").col-sm-2.control-label
							span Add task
						div.col-sm-2
							+textBox({"data-bind": "value:taskToAdd, valueUpdate: 'afterkeydown'"})(style="display: inline-block")
						div.form-group
							button(type="button", class="btn btn-primary marleft", "data-bind" = "click: add, enable: taskToAdd().length > 0") Add

					table.table.table-striped.tasks
						thead
							tr
								th Task name
								th Action
						tbody("data-bind" = "foreach: tasks")
							tr("data-bind" = "css: { done: $data.done() }")
								td 
									span("data-bind" = "text: $data.text")
									//- Use ko.toJSON to pass the object back
									input(type="hidden", name="tasks", "data-bind" = "value: ko.toJSON($data)")
								td
									a.btn.btn-danger(class="removeButton", type="button", "data-bind" = "click: $parent.removeTask($data)") Remove
									| 
									a.btn.btn-primary(class="doneButton", type="button", "data-bind" = "click: $parent.doneTask($data)") Done

				hr

				div.form-group
					label.col-sm-2.control-label
					div.col-sm-10
						button(type="submit").btn.btn-primary Save user

		.koModel
			h2 KO model
			pre(data-bind="text: ko.toJSON($data, null, 2)")

		script.
			//	The KO task model
			var Task = function (text, done) {
					this.text = ko.observable(text);
					this.done = ko.observable(!!done);
				}, 
				//	Main view model
				VM = function(items){
					var self = this;
					self.username = ko.observable();
					self.email = ko.observable();

					var self = this;
					self.tasks = ko.observableArray(items);
					self.taskToAdd = ko.observable("");
					//	Grab text and create task object
					self.add = function() {
						if (self.taskToAdd() != "") {
							self.tasks.push(new Task(this.taskToAdd()));
							self.taskToAdd("");
						}
					};
					//	Create a remove method via returning function pattern
					self.removeTask = function(task) {
						return function() {
							self.tasks.remove(task);
						};
					};
					self.doneTask = function(task) {
						return function() {
							task.done(!task.done());
						};
					};
					self.completed = ko.computed(function () {
						return self.tasks().filter(function (task) {
							return task.done();
						});
					});
				}, vm,
				tasks = [];

			$.each(!{form.tasks}, function(index, task){
				tasks.push(new Task(task.title, task.complete));
			});

			vm = new VM(tasks);
			
			ko.applyBindings(vm);