//	Basic jQuery based unobtrusive validation binder for 
//	https://github.com/chriso/validator.js
//	Add data-validate attributes with JSON validations to bind.
/*
	TODO:

	[done] . Ability to validate when field values change or the user types something,
			as per jQuery behaviour

	. Ability to add validators dynamically
	
	. Ability to configure:
		. invalidField
		. cleanField
		[done - unobtrusive] . data-validator-invalid-class
		[done - unobtrusive] . data-validator-aggressive

		NOTE2: This wouldn't work for the decorator functions, so:
			- Add a flag that allows manual configuration, eg:
				
				<form data-validate-off ...>

			And then you should be able to do:

				$(document.forms[0]).validate(...)
	
*/

(function($){
	var formValidations = {},
		//	Class added to the field and span with error message
		invalidClass = 'validator-invalid',
		//	Data attribute to override aggressive behaviour
		agressiveData = 'data-validator-aggressive',
		//	Data attribute to override aggressive behaviour
		invalidClassData = 'data-validator-invalid-class',
		//	Do we apply aggressive validation
		validateAggressive = true,

		//	Basic decorator function to remove invalid decoration
		cleanField = function(fObj){
			var $el = $(fObj.el),
				$siblings = $el.siblings('.' + fObj.invalidClass);

			//	Remove old messages
			if($siblings.length) {
				$siblings.remove();
			}

			//	Remove the invalidClass class from the element itself
			$el.removeClass(fObj.invalidClass);
		},

		invalidField = function(fObj){
			var $el = $(fObj.el);
			cleanField(fObj);

			//	Show default message
			//	TODO: Use a UL
			$el.after(
				"<span class='" + fObj.invalidClass+ "'>" + 
				fObj.errors.join("<br/>") + 
				"</span>"
			);

			//	Add the invalidClass class to the element itself
			$el.addClass(fObj.invalidClass);
		},

		//	Map validation keys - might be sequelize 
		//	using custom keys or older version of validate?
		//	Current version: https://github.com/chriso/validator.js
		validationMap = {
			'len': 'isLength'
		},

		//	Grab a validation object, (so we can validate a field)
		//	Note: this is quite inefficient.
		getValidationObjectByElement = function(el){
			var result;
			$.each(formValidations, function(vKey, vVal){
				$.each(vVal, function(key, val){
					if($(val.el).get(0) == $(el).get(0)) {
						result = val;
						return false;
					}
				});
				if(result) {
					return false;
				}
			});
			return result;
		},

		//	Validates a field object
		validateFieldObject = function(fObj) {
			//	Remove old errors
			if(fObj.errors) {
				delete fObj.errors;
			}

			$.each(fObj.validate, function(key, val){
				var item = validationMap[key]? validationMap[key]: key,
					args = [].concat(val.args || []),
					isValid;

				//	Add our value at the front of the arguments array
				//	TODO: handle radio button values and 
				//		checkboxes with the same name
				args.unshift($(fObj.el).val());

				isValid = validator[item].apply(this, args);

				if(!isValid) {
					fObj.errors = fObj.errors || [];
					fObj.errors.push(val.msg);
				}
			});

			//	Return false if there are errors
			return !(!!fObj.errors);
		},

		//	Returns a form onSubmit function that validates the form
		validateForm = function(validateList){
			//	Form on submit function
			return function(event) {
				var formIsValid = true,
					firstInvalid;

				$.each(validateList, function(vKey, fObj){
					//	Notify if we found errors for this field
					if(!validateFieldObject(fObj)) {
						invalidField(fObj);
						formIsValid = false;
						if(!firstInvalid) {
							firstInvalid = fObj;
						}
					} else {
						cleanField(fObj);
					}
				});

				//	TODO: Add a callback to control what happens here.
				if(!formIsValid) {
					//	Focus!!!
					$(firstInvalid.el).focus();

					event.preventDefault();
					return false;
				}

			};
		},
		
		//	Find out which form index a form has
		//	TODO: This is quite inefficient, and is called for each field - find a better way.
		formIndex = function(form) {
			var result = 0;
			$.each(document.forms, function(idx, formElement){
				if(form == formElement) {
					result = idx;
					return false;
				}
			});
			return result;
		},

		//	Bind our validations unobtrusively using data-validate attributes
		//	TODO: Allow custom attributes
		bindValidations = function(){
			//	Testing bind validation
			$('[data-validate]').each(function(idx, el){
				var $el = $(el),
					validate = $el.data('validate'),
					form = $el.prop('form'),
					fIndex = formIndex(form);

				//	Grab our validations from the field
				formValidations[fIndex] = formValidations[fIndex] || [];
				formValidations[fIndex].push({
					el: $el,
					form: form,
					validate: validate,
					invalidClass: $el.attr(invalidClassData) || invalidClass
				});
			});

			//	TODO: Ability to add validations obtrusively
			//	You would need to expose an addValidation method and be able to
			//		either re-bind the validations, or inject into the validateList
			//		which is currently not possible

			//	Set events and bind the submit for each form
			$.each(formValidations, function(idx, validate){
				var form = document.forms[idx],
					$form = $(form),
					formAggressive = $form.attr(agressiveData) !== "false" && validateAggressive;

				//	Bind form validation
				$form.on('submit.validate', validateForm(validate));

				//	Bind "aggressive" events:
				//		. blur (focusout) - for when the user leaves the field
				//		. keyup - only for when the field is invalid already, or we are aggressively validating
				//		. change - only for when the field is invalid already, or we are aggressively validating
				//
				$form.on('focusout change keyup', ':input', function(event) {
					var $el = $(event.target),
						fObj = getValidationObjectByElement(event.target),
						beAggressive = $el.attr(agressiveData) === "true" || formAggressive;

					if(fObj && beAggressive && $el.attr(agressiveData) !== "false" && (event.type == "focusout" || $el.hasClass(fObj.invalidClass) || $el.attr(agressiveData) === "true")) {
						if(!validateFieldObject(fObj)) {
							invalidField(fObj);
						} else {
							cleanField(fObj);
						}
					}
				});
			});

		};

	//	Bind validations on DOM ready
	$(function() {
		bindValidations();
	});

}(jQuery));