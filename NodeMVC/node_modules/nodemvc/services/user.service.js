/*
	User service

	Pattern: callbacks have error as first parameter always
*/
var async = require('async'),
	_ = require('lodash'),
	db;

var service = {

	//	Grab use based on ID, including any tasks
	get: function(id, cb) {
		db.User.find({
			include: [ db.Task ],
			where: { id: id }
		}).success(function(user) {
			//	no error, user we got
			cb(null, user);
		}).error(function(err){
			cb(err);
		});
	},

	getByUsername: function(username, cb) {
		db.User.find({
			include: [ db.Task ],
			where: { username: username }
		}).success(function(user) {
			//	no error, user we got
			cb(null, user);
		}).error(function(err){
			cb(err);
		});
	},

	//	Create a user, including a set of tasks
	create: function(obj, taskList, cb){
		db.User.create(obj)
		.success(function(entry) {
			//	Add tasks
			if(taskList) {
				taskList = _.isArray(taskList)? taskList: [taskList];

				async.each(taskList, function(task, callback){
					db.Task.create({
						UserId: entry.id,
						title: task.title,
						complete: task.complete
					}).success(function(entry) {
						callback();
					}).error(function(err) {
						callback(err);
					});
				}, function(err){
					cb(err, entry);
				});
			} else {
				cb(null, entry);
			}

		}).error(function(err) {
			cb(err);
		});
	},

	//	Update a user
	//
	//	Note: For taskList, pass in:
	//		. null to not change the tasks
	//		. [] to empty them all
	//		. [list of tasks] to set them
	update: function(obj, taskList, cb) {
		//	Grab users and their tasks
		service.get(obj.id, function(err, entry) {
			if (err || !entry) {
				return cb(err, entry);
			} else {
				entry.updateAttributes(obj).complete(function(err, entry) {
					if (!err) {
						//	Handle tasks
						async.waterfall([

							//	Remove all current tasks only if a new set of tasks have been passed in
							//	Pass empty list: [] to set no tasks
							//	TODO: Should be using a transaction
							function(callback){
								if(taskList) {
									async.each(entry.tasks, function(task, callback){
										task.destroy()
										.success(function(entry) {
											callback();
										})
										.error(function(err) {
											callback(err);
										});
									}, function(err){
										callback(err);
									});
								} else {
									callback();
								}
							},

							//	Add newly set tasks
							function(callback){
								if(taskList) {
									var tasks = _.isArray(taskList)? taskList: [taskList];
									async.each(tasks, function(task, callback){
										db.Task.create({
											UserId: entry.id,
											title: task.title,
											complete: task.complete
										})
										.success(function(entry) {
											callback();
										})
										.error(function(err) {
											callback(err);
										});
									}, function(err){
										callback(err);
									});
								} else {
									callback();
								}
							}
						], function(err) {
							cb(err, entry);
						});
					} else {
						cb(err, entry);
					}
				})
				.error(function(err) {
					cb(err, entry);
				});
			}
		});
	},

	//	Delete a user
	//	Note: We are using cascading to delete the users tasks
	delete: function(id, cb) {
		service.get(id, function(err, user) {
			if (err) {
				cb(err, user);
			} else {
				user.destroy().on('success', function(err, user) {
					cb(err, user);
				});
			}
		});
	}

};

module.exports = function(dbModels) {
	if(!dbModels){
		throw "You must pass in an object containing any models required";
	} else {
		db = dbModels;
	}
	return service;
};