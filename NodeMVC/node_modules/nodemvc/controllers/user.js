/*
	User router

	# Method pattern

	The methods here follow a particular pattern so that errors
	are caught and handled correctly, by using next(err).
	For example if you are tring to load a user and it fails,
	then you should call next with the error:

	app.param('user', function(req, res, next, id){
		User.find(id, function(err, user){
			if (err) {
				next(err);
			} else if (user) {
				req.user = user;
				next();
			} else {
				next(new Error('failed to load user'));
			}
		});
	});

	In this case, next is called everywhere, and the error is 
	passed along to the middleware if it exists.

*/
var async = require('async'),
	_ = require('lodash'),
	forms = require('../modules/forms');


/*
 * User router
 */
module.exports = {

	index: function(req, res){
		//	Grab our db
		var db = req.app.get('db');

		async.waterfall([
			//	Get the list of users
		    function(callback){
		    	//	Grab users from db
				db.User.findAll({
					include: [ db.Task ],
					order: '"createdAt" ASC'
				}).success(function(users) {
					callback(null, users);
				}).error(function(){
					//	TODO: Better herror handling
					console.log('ERROR', arguments);
					callback(null, []);
				});
		    },

		    //	Create our response and render it
		    function(users, callback){
		    	var response = {
					title: 'Users page',
					//	Dynamic data on model
					users: users
				};

		    	//	Set links
		    	_.forOwn(users, function(value, key){
		    		value.editLink = "/user/" + value.id
		    	});

		    	response.addLink = "/user/new";

				res.render('users', response);
		    }
		], function (err, result) {
			//	TODO: Should render error page here
			res.render('error', {
				title: 'Error page',
				error: err
			});
		});

	},

	//	Deletes a user
	delete: function(req, res) {
		//	Pointer to our service
		var service = req.app.get('services');

		service.user.delete(req.params.user_id, function(err, user){
			if(!err) {
				//	Go to users, with a message of success!
				req.qmessage('success', 'Deleted user');
			} else {
				//	Go to users, with error
				req.qmessage('error', 'Could not delete user');
			}
			res.redirect("/users");
		});
	},

	//	Show add page
	new: function(req, res) {
		//	Grab our db
		var db = req.app.get('db');
		
		//	Create User for model
		var user = forms.sequelizeModelToForm(db.User);
		user = forms.form(user, req.i18n.t);

		res.render('user', {
			title: 'User add page',
			form: {
				user: user,
				tasks: "[]",
				action: "/user"
			}
		});
	},


	//	Show edit page
	edit: function(req, res, next){
		//	Pointer to our service
		var service = req.app.get('services');

		//	Use a try-catch in case there are database or ORM errors
		//	TODO: consider integrating sole.js for error logging
		try {
			service.user.get(req.params.user_id, function(err, user){
				var tasks = [],
					userForm;

				if(user) {
					//	Create the task form objects translated
					if(user.tasks && user.tasks.length > 0) {
						_.forOwn(user.tasks, function(v, k){
							//	We are rendering a Knockout view on the front end, so
							//	we simply grab a list of objects with 'complete' and 'title'.
							//	If you wanted form fields, push:
							//	forms.form(forms.sequelizeModelToForm(v), req.i18n.t )
							tasks.push({ title: v.title, complete: v.complete });
						});
					}

					//	Create the user form object and apply translations
					user = forms.sequelizeModelToForm(user);
					user = forms.form(user, req.i18n.t);

					res.render('user', {
						title: 'User edit page',
						form: {
							user: user,
							tasks: JSON.stringify(tasks),
							action: "/user/" + user.id.value
						}
					});
				} else {
					res.render('user', {
						title: 'User error page',
						error: 'User not found.'
					});
				}
			});
		} catch(except) {
			req.qmessage('error', 'Database error - could not load user');
			res.render('error', {
				title: 'Error page',
				error: except
			});
		}
	},

	//	Save an existing user
	update: function(req, res) {

		//	Pointer to our service
		var db = req.app.get('db'),
			service = req.app.get('services'),
			tasks = [];

		//	Grab the tasks
		//	Note: we have mapped the frontend tasks to "text" for 
		//	"title" and "done" for "complete" to demonstrate
		//	custom data mappings here. In real cases, there is no need
		//	to map it differently, and you should simply be able
		//	to use JSON.parse on req.body.tasks
		if(req.body.tasks) {
			//	Parse the tasks from JSON
			var taskObj = req.body.tasks;
			taskObj = _.isArray(taskObj)? taskObj: [taskObj];

			if(taskObj.length > 0) {
				_.forOwn(taskObj, function(v, k){
					var task = JSON.parse(v);
					tasks.push({ title: task.text, complete: task.done });
				});
			}
		}

		//	Update the user
		service.user.update(req.body,
			//	null won't change the tasks, [] will empty the tasks
			tasks, 
			//	The callback returns error or null, user or null
			function(err, user){
				if(!err) {
					//	Go to users, with a message of success!
					req.qmessage('success', 'Saved user ' + req.body.username);
					res.redirect("/users");
				} else {
					//	Show user edit/add page with an error
					res.qmessage('error', _.map(err, function(errList){
						return errList.join("<br/>");
					}));

					//	Grab our db
					var db = req.app.get('db'),
						userInstance = forms.formToSequelizeModel(db.User, req.body),
						user,
						tasks = [];

					//	Create the user form object and apply translations
					user = forms.sequelizeModelToForm(userInstance);
					user = forms.form(user, req.i18n.t);

					if(req.body.tasks) {
						//	Parse the tasks from JSON
						var taskObj = req.body.tasks;
						taskObj = _.isArray(taskObj)? taskObj: [taskObj];

						if(taskObj.length > 0) {
							//	We using 'done' and 'text' for 'complete' and 'title'.
							//	This is to demonstrate custom data mapping
							_.forOwn(taskObj, function(v, k){
								var task = JSON.parse(v);
								tasks.push({ title: task.text, complete: task.done });
							});
						}
					}

					return res.render('user', {
						title: 'User edit page',
						form: {
							user: user,
							tasks: JSON.stringify(tasks),
							action: "/user/" + user.id.value
						}
					});
				}
			});
	},

	//	Create a new user
	create: function(req, res) {
		//	Pointer to our service
		var service = req.app.get('services'),
			tasks = [];

		//	Grab the tasks
		//	Note: we have mapped the frontend tasks to "text" for "title"
		//	and "done" for "complete" to demonstrate
		//	custom data mappings here. In real cases, there is no need
		//	to map it differently, and you should simply be able
		//	to use JSON.parse on req.body.tasks
		if(req.body.tasks) {
			//	Parse the tasks from JSON
			var taskObj = req.body.tasks;
			taskObj = _.isArray(taskObj)? taskObj: [taskObj];

			if(taskObj.length > 0) {
				_.forOwn(taskObj, function(v, k){
					var task = JSON.parse(v);
					tasks.push({ title: task.text, complete: task.done });
				});
			}
		}

		//	Create the user
		service.user.create(req.body,
			//	null won't change the tasks, [] will empty the tasks
			tasks, 
			//	The callback returns error or null, user or null
			function(err, user){
				if(!err) {
					//	Go to users, with a message of success!
					req.qmessage('success', 'Created user ' + req.body.username);
					res.redirect("/users");
				} else {
					req.qmessage('error', 'Sequelize error, could not create user');
					//	TODO: Should render error page here?
					res.render('error', {
						title: 'Error page',
						error: err
					});
				}
			}
		);
	},

	//	Adds a few test users
	//	TODO: Detect if the users exist, then insert if not
	addTestUsers: function(req, res) {
		//	Grab our db
		var db = req.app.get('db'),
			users = [
				{ username: 'bob', email: 'bob@example.com', userpassword: 'password' },
				{ username: 'jill', email: 'jill@example.com', userpassword: 'password' }
			];

		async.each(users, function(user, cb){
			db.User.create(user)
				.complete(function(err) {
					if(err) {
						cb(err? new Error('Failed to add test user: ' + err): null);
					} else {
						cb(null);
					}
				});
		}, function(err, result) {
			if(err) {
				console.log('ERROR', err);
				res.render('error', {
					title: 'Error page',
					error: err
				});
			} else {
				req.qmessage('success', 'Created test users');
				res.redirect("/users");
			}
		});
	}
};