var async = require('async'),
	_ = require('lodash'),
	forms = require('../modules/forms'),
	passport 	= require('passport'),
	LocalStrategy = require('passport-local').Strategy;

//	We are using local strategy, (ie: local DB), however here
//	you can use Facebook, Google, Twitter login strategies, eg:
//	http://passportjs.org/guide/facebook/
//	http://passportjs.org/guide/google/

// Passport session setup.
//   To support persistent login sessions, Passport needs to be able to
//   serialize users into and deserialize users out of the session.  Typically,
//   this will be as simple as storing the user ID when serializing, and finding
//   the user by ID when deserializing.
passport.serializeUser(function(user, done) {
	done(null, user.id);
});

passport.deserializeUser(function(id, done) {
	//	Pointer to our service
	var service = GLOBAL.services;

	service.user.get(id, function(err, user){
		return done(err, user);
	});
});


// Use the LocalStrategy within Passport.
//   Strategies in passport require a `verify` function, which accept
//   credentials (in this case, a username and password), and invoke a callback
//   with a user object.  In the real world, this would query a database;
//   however, in this example we are using a baked-in set of users.
passport.use(new LocalStrategy({
		usernameField: "loginUsername",
		passwordField: "loginPassword"
	},
	function(username, password, done) {
		//	Use asynchronous verification
		process.nextTick(function () {
			//	Pointer to our service
			var service = GLOBAL.services;

			service.user.getByUsername(username, function(err, user){
				if (err) { return done(err); }
				if (!user) { return done(null, false, { message: 'Unknown user ' + username }); }
				if (user.userpassword != password) { return done(null, false, { message: 'Invalid password' }); }
				return done(null, user);
			});
		});
	}
));


//	Show login page
module.exports.login = function(req, res){
	res.render('login', {
		user: req.user,
		from: req.query.from 
	});
};


// POST /login
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  If authentication fails, the user will be redirected back to the
//   login page.  Otherwise, the primary route function function will be called,
//   which, in this example, will redirect the user to the home page.
//
//   curl -v -d "username=bob&password=secret" http://127.0.0.1:3000/login
//	Custom auth 
module.exports.authenticateUser = function(req,res,next) {
	passport.authenticate('local', function(err,user) {
		if(!user) {
			req.qmessage("error", "Login incorrect");
			res.redirect('/login' + ((req.body.from)? "?from=" + encodeURIComponent(req.body.from): ""));
		} else {
			//	Success, so log in the user and redirect
			req.logIn(user, function(err) {
				if (err) {
					return next(err); 
				} else {
					req.qmessage("success", "Thanks for logging in!");
					if(req.body.from) {
						res.redirect(decodeURIComponent(req.body.from));
					} else {
						res.redirect('/');
					}
				}
			});
		}
	})(req,res,next);
};


//	Logout the user
module.exports.logout = function(req, res){
	req.logout();
	req.qmessage("success", "You've been logged out");
	res.redirect('/login');
};
