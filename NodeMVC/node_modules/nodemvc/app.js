var express 	= require('express'),
	passport 	= require('passport'),
	Sequelize 	= require('sequelize'),
	controllers	= require('./controllers'),
	path		= require('path'),
	qmessage 	= require('qmessage'),
	i18n 		= require("i18next"),
	expose 		= require('./modules/expose'),
	render 		= require('./modules/render'),
	jadehelpers = require('jade-helpers'),
	app 		= express(),
	config		= require('./config/dbconfig'),
	db,
	services;


var favicon = require('serve-favicon');
var logger = require('morgan');
var methodOverride = require('method-override');
var session = require('express-session');
var bodyParser = require('body-parser');
//var cookieParser = require('cookie-parser');
var multer = require('multer');
var errorHandler = require('errorhandler');

var env = process.env.NODE_ENV || 'development';


// all environments
//	TODO: proper environment support
//app.set('port', process.env.PORT || 3333);
app.set('port', 3335);
app.set('views', __dirname + '/views');
app.set('view engine', 'jade');

app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));
app.use(i18n.handle);
app.use(methodOverride());

//	TODO: Use DB for sessions - memoryStore is 
//	only good for a single machine, and when the 
//	node server does not restart...
//	http://stackoverflow.com/questions/5286073/node-js-server-restart-drops-the-sessions
//	Note: best to keep them out of the postgres DB.
//app.use(cookieParser('This is heaps secret'));
//app.use(express.session('Express session secret goes here'));

app.use(session({
	resave: true,
	saveUninitialized: true,
	secret: 'Express session secret goes here' 
}));


app.use(qmessage);
app.use(expose);
app.use(render);

//	Now add static routes
app.use(express.static(path.join(__dirname, 'public')));

//	TWITTER_CONSUMER_KEY=xxx TWITTER_CONSUMER_SECRET=xxx node app.js
app.use(passport.initialize());
app.use(passport.session());

//	Setup our dynamic routes last for Express 4
//	See: http://stackoverflow.com/questions/12695591/node-js-express-js-how-does-app-router-work
//app.use(app.router);


// development only
if('development' == env){
	app.use(errorHandler());
	app.locals.pretty = true;
}


//	TODO: Handle errors
//	http://expressjs.com/guide.html#error-handling
//	http://stackoverflow.com/questions/7151487/error-handling-principles-for-nodejs-express-apps

//	Basic error handler - will only be called with non-null errors
//	To use, do next(err); in your controllers
app.use(function(err, req, res, next) {
	// only handle `next(err)` calls

	// Refs:
	// http://stackoverflow.com/questions/14492511/can-i-get-express-error-handler-to-catch-exceptions-thrown-inside-of-a-mongoose
	// http://www.senchalabs.org/connect/errorHandler.html
	
	console.log("ERROR", err);

});



//	Load db after environmental configs
//	TODO: use environment to set db config - it should not be global.
db = require('./models')(new Sequelize(
	config.database, 
	config.username, 
	config.password, 
	config.options
));

//	Load services after environmental configs
services = require('./services')(db);


//	http://i18next.com/node/pages/doc_express.html
i18n.init({
	//	Ignore certain routes
	ignoreRoutes: ['images/', 'public/', 'css/', 'js/'],
	//	
    //resSetPath: 'locales/__lng__/translation.__lng__.json',
    //	Get objects - by default it will throw an error
    returnObjectTrees: true,
    //	Set a default language
	lng: "en",
	//	Set fallback
	fallbackLng : 'en',
	//	Let's debug for now... TODO: don't debug unless we have to.
	debug: true
});
//	Setup the helper for our templates
i18n.registerAppHelper(app);


//	Add helpers to jade
//	From: https://groups.google.com/forum/#!topic/jadejs/ufsL-wd4E8w
//	app.locals.numberToCurrency = function(val){ return anotherValue }
jadehelpers.addHelpers(app);


//	Setup controllers - this should always be just before starting the app
controllers(app);


//	Connect to DB and sync schema
//	Note: it's a good idea to do this on startup.
//	TODO: Should not drop all the data though?
db.sequelize
	//	
	//.sync({ force: true })
	.sync()
	.complete(function(err) {
		if (err) {
			console.log('Error', err);
			throw err
			//	TODO: Need to log this to an 
			//	endpoint that can notify us.
		} else {
			//	We're good to go.
			// http.createServer(app).listen(app.get('port'), function(){
			// 	console.log('Express server listening on port ' + app.get('port'));
			// 	//	Set DB so we can access it in the controllers
			// 	app.set('db', db);
			// 	//	Set services so we can access them in the controllers
			// 	app.set('services', services);
			// 	GLOBAL.services = services;
			// });
			app.listen(app.get('port'), function(){
				console.log('Express server listening on port ' + app.get('port'));
				//	Set DB so we can access it in the controllers
				app.set('db', db);
				//	Set services so we can access them in the controllers
				app.set('services', services);
				GLOBAL.services = services;
			});
		}
	});
